const int nmax = 4e5 + 5;

struct Node {
  long long val;
  Node * l, * r;
  Node() { l = r = nullptr; }
  Node(long long val) : val(val) {}
  Node(Node * l, Node *r) : l(l), r(r) {}
};

std::vector<Node *> pers;

Node * build(long long l, long long r) {
  if (l + 1 == r) return new Node(0);
  long long mid = (l + r) >> 1;
  return new Node(build(l, mid), build(mid, r));
}

Node * upd(Node * v, long long l, long long r, long long pos, long long val) {
  if (l + 1 == r) return new Node(val);
  long long mid = (l + r) >> 1;
  Node * L = v->l;
  Node * R = v->r;
  if (pos < mid) return new Node(upd(v->l, l, mid, pos, val), R);
  else return new Node(L, upd(v->r, mid, r, pos, val));
}

long long get(Node * v, long long l, long long r, long long pos) {
  if (l + 1 == r) return v->val;
  long long mid = (l + r) >> 1;
  if (pos < mid) return get(v->l, l, mid, pos);
  else return get(v->r, mid, r, pos);
}

signed main() {
    std::cin.tie(0)->sync_with_stdio(0);
    pers.push_back(build(0, nmax));
    // something else ...
    return 0;
}

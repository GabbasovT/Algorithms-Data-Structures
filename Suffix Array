void radix(std::vector<int> & sufArr, std::vector<int> & c) {
    int n = (int)sufArr.size();
    std::vector<int> cnt(n), a(n), pos(n, 0);
    for (auto x : c) cnt[x]++;
    for (int i = 1; i < n; ++i) pos[i] = pos[i - 1] + cnt[i - 1];
    for (auto x : sufArr) {
        int i = c[x];
        a[pos[i]] = x;
        pos[i]++;
    }
    sufArr = a;
}

std::vector<int> suffixArray(std::string & s) {
    s += '$';
    int n = (int)s.size();
    std::vector<int> sufArr(n), c(n, 0);
    std::vector<std::pair<char, int>> buffer(n);
    for (int i = 0; i < n; ++i) buffer[i] = {s[i], i};
    sort(buffer.begin(), buffer.end());
    for (int i = 0; i < n; ++i) sufArr[i] = buffer[i].second;
    for (int i = 1; i < n; ++i) c[sufArr[i]] = c[sufArr[i - 1]] + (buffer[i].first != buffer[i - 1].first);
    for (int k = 1; k < n; k *= 2) {
        for (int i = 0; i < n; ++i) sufArr[i] = (sufArr[i] - k + n) % n;
        radix(sufArr, c);
        std::vector<int> cc(n);
        cc[sufArr[0]] = 0;
        for (int i = 1; i < n; ++i) 
            cc[sufArr[i]] = cc[sufArr[i - 1]] + (c[sufArr[i]] != c[sufArr[i - 1]] 
                || c[(sufArr[i] + k) % n] != c[(sufArr[i - 1] + k) % n]);
        std::swap(c, cc);
    }
    return sufArr;
}

signed main() {
    std::cin.tie(0)->sync_with_stdio(0);
    // something else ...
    return 0;
}
